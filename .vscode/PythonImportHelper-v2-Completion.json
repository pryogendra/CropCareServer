[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "site",
        "importPath": "django.contrib.admin.sites",
        "description": "django.contrib.admin.sites",
        "isExtraImport": true,
        "detail": "django.contrib.admin.sites",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "csrf_exempt",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "CropCare.asgi",
        "description": "CropCare.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "CropCare.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "CropCare.settings",
        "description": "CropCare.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-&t#yk6gtrk##f5!qnjmc!=fs9oqjs=zm0qo_k4#8wfqftv-ujs'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [",
        "detail": "CropCare.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "CropCare.settings",
        "description": "CropCare.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-&t#yk6gtrk##f5!qnjmc!=fs9oqjs=zm0qo_k4#8wfqftv-ujs'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'server.apps.ServerConfig',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',",
        "detail": "CropCare.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "CropCare.settings",
        "description": "CropCare.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'server.apps.ServerConfig',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',",
        "detail": "CropCare.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "CropCare.settings",
        "description": "CropCare.settings",
        "peekOfCode": "ALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'server.apps.ServerConfig',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "CropCare.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "CropCare.settings",
        "description": "CropCare.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'server.apps.ServerConfig',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\nMIDDLEWARE = [",
        "detail": "CropCare.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "CropCare.settings",
        "description": "CropCare.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'CropCare.urls'",
        "detail": "CropCare.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "CropCare.settings",
        "description": "CropCare.settings",
        "peekOfCode": "ROOT_URLCONF = 'CropCare.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR,'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "CropCare.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "CropCare.settings",
        "description": "CropCare.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR,'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "CropCare.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "CropCare.settings",
        "description": "CropCare.settings",
        "peekOfCode": "WSGI_APPLICATION = 'CropCare.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation",
        "detail": "CropCare.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "CropCare.settings",
        "description": "CropCare.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "CropCare.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "CropCare.settings",
        "description": "CropCare.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "CropCare.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "CropCare.settings",
        "description": "CropCare.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-in'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = '/static/'\nSTATIC_ROOT = 'staticfiles'\n#STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n#STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]",
        "detail": "CropCare.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "CropCare.settings",
        "description": "CropCare.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = '/static/'\nSTATIC_ROOT = 'staticfiles'\n#STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n#STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n# Default primary key field type",
        "detail": "CropCare.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "CropCare.settings",
        "description": "CropCare.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = '/static/'\nSTATIC_ROOT = 'staticfiles'\n#STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n#STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field",
        "detail": "CropCare.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "CropCare.settings",
        "description": "CropCare.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = '/static/'\nSTATIC_ROOT = 'staticfiles'\n#STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n#STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "CropCare.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "CropCare.settings",
        "description": "CropCare.settings",
        "peekOfCode": "STATIC_URL = '/static/'\nSTATIC_ROOT = 'staticfiles'\n#STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n#STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n#media urls\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')",
        "detail": "CropCare.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "CropCare.settings",
        "description": "CropCare.settings",
        "peekOfCode": "STATIC_ROOT = 'staticfiles'\n#STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n#STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n#media urls\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')",
        "detail": "CropCare.settings",
        "documentation": {}
    },
    {
        "label": "#STATIC_ROOT",
        "kind": 5,
        "importPath": "CropCare.settings",
        "description": "CropCare.settings",
        "peekOfCode": "#STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n#STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n#media urls\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')",
        "detail": "CropCare.settings",
        "documentation": {}
    },
    {
        "label": "#STATICFILES_DIRS",
        "kind": 5,
        "importPath": "CropCare.settings",
        "description": "CropCare.settings",
        "peekOfCode": "#STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n#media urls\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')",
        "detail": "CropCare.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "CropCare.settings",
        "description": "CropCare.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n#media urls\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')",
        "detail": "CropCare.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "CropCare.settings",
        "description": "CropCare.settings",
        "peekOfCode": "MEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')",
        "detail": "CropCare.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "CropCare.settings",
        "description": "CropCare.settings",
        "peekOfCode": "MEDIA_ROOT = os.path.join(BASE_DIR, 'media')",
        "detail": "CropCare.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "CropCare.urls",
        "description": "CropCare.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('accounts/',include('server.urls'))\n]",
        "detail": "CropCare.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "CropCare.wsgi",
        "description": "CropCare.wsgi",
        "peekOfCode": "application = get_wsgi_application()\n#application = Cling(get_wsgi_application())",
        "detail": "CropCare.wsgi",
        "documentation": {}
    },
    {
        "label": "#application",
        "kind": 5,
        "importPath": "CropCare.wsgi",
        "description": "CropCare.wsgi",
        "peekOfCode": "#application = Cling(get_wsgi_application())",
        "detail": "CropCare.wsgi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "server.migrations.0001_initial",
        "description": "server.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='User',\n            fields=[\n                ('username', models.CharField(max_length=150, primary_key=True, serialize=False, unique=True)),\n                ('password', models.CharField(max_length=255)),",
        "detail": "server.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "server.migrations.0002_userprofile_delete_user",
        "description": "server.migrations.0002_userprofile_delete_user",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('server', '0001_initial'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='UserProfile',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "server.migrations.0002_userprofile_delete_user",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "server.migrations.0003_alter_userprofile_pincode_and_more",
        "description": "server.migrations.0003_alter_userprofile_pincode_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('server', '0002_userprofile_delete_user'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='userprofile',\n            name='pincode',\n            field=models.CharField(blank=True, max_length=15, null=True),\n        ),",
        "detail": "server.migrations.0003_alter_userprofile_pincode_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "server.migrations.0004_alter_userprofile_mobile",
        "description": "server.migrations.0004_alter_userprofile_mobile",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('server', '0003_alter_userprofile_pincode_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='userprofile',\n            name='mobile',\n            field=models.CharField(max_length=18),\n        ),",
        "detail": "server.migrations.0004_alter_userprofile_mobile",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "server.migrations.0005_post",
        "description": "server.migrations.0005_post",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('server', '0004_alter_userprofile_mobile'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Post',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('image', models.ImageField(upload_to='posts/')),",
        "detail": "server.migrations.0005_post",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "server.migrations.0006_remove_post_posted_ago_post_posted_at",
        "description": "server.migrations.0006_remove_post_posted_ago_post_posted_at",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('server', '0005_post'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='post',\n            name='posted_ago',\n        ),\n        migrations.AddField(",
        "detail": "server.migrations.0006_remove_post_posted_ago_post_posted_at",
        "documentation": {}
    },
    {
        "label": "ServerConfig",
        "kind": 6,
        "importPath": "server.apps",
        "description": "server.apps",
        "peekOfCode": "class ServerConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'server'",
        "detail": "server.apps",
        "documentation": {}
    },
    {
        "label": "UserProfile",
        "kind": 6,
        "importPath": "server.models",
        "description": "server.models",
        "peekOfCode": "class UserProfile(models.Model):\n    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name=\"profile\")\n    location = models.CharField(max_length=255)\n    mobile = models.CharField(max_length=18)\n    pincode = models.CharField(max_length=15, null=True, blank=True)\n    profile_image = models.ImageField(upload_to='media/', null=True, blank=True)\n    #profile_image = models.BinaryField(null=True,blank=True)\n    def __str__(self):\n        return self.user.username\nclass Post(models.Model):",
        "detail": "server.models",
        "documentation": {}
    },
    {
        "label": "Post",
        "kind": 6,
        "importPath": "server.models",
        "description": "server.models",
        "peekOfCode": "class Post(models.Model):\n    user = models.ForeignKey(UserProfile, related_name='posts', on_delete=models.CASCADE)\n    image = models.ImageField(upload_to='posts/')\n    caption = models.CharField(max_length=255)\n    likes = models.IntegerField()\n    comments = models.IntegerField()\n    posted_at = models.DateTimeField(default=timezone.now)\n    def __str__(self):\n        return f\"{self.user.user}: {self.caption[:30]}\"\n    @property",
        "detail": "server.models",
        "documentation": {}
    },
    {
        "label": "UserRegistrationSerializer",
        "kind": 6,
        "importPath": "server.serializers",
        "description": "server.serializers",
        "peekOfCode": "class UserRegistrationSerializer(serializers.ModelSerializer):\n    location = serializers.CharField(max_length=255)\n    mobile = serializers.CharField(max_length=15)\n    pincode = serializers.CharField(max_length=15, allow_null=True)\n    profile_image = serializers.ImageField(required=False, allow_null=True)\n    class Meta:\n        model = User\n        fields = ['username', 'password', 'email', 'location', 'mobile', 'pincode', 'profile_image']\n    def create(self, validated_data):\n        location = validated_data.pop('location')",
        "detail": "server.serializers",
        "documentation": {}
    },
    {
        "label": "UserLoginSerializer",
        "kind": 6,
        "importPath": "server.serializers",
        "description": "server.serializers",
        "peekOfCode": "class UserLoginSerializer(serializers.Serializer):\n    username = serializers.CharField(max_length=150)\n    password = serializers.CharField(write_only=True)\n    def validate(self, atr):\n        username = atr.get('username')\n        password = atr.get('password')\n        user = User.objects.filter(username=username).first()\n        if user and user.check_password(password):\n            return atr\n        raise serializers.ValidationError('Invalid username or password')",
        "detail": "server.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "server.urls",
        "description": "server.urls",
        "peekOfCode": "urlpatterns = [\n    path('register/', views.register, name='register'),\n    path('login/', views.login_user, name='login'),\n    path(\"posts/\",views.post,name='post'),\n    path(\"profile/\",views.profile,name='profile'),\n]",
        "detail": "server.urls",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 2,
        "importPath": "server.views",
        "description": "server.views",
        "peekOfCode": "def register(request):\n    if request.method == 'POST':\n        serializer = UserRegistrationSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response({'message': 'User registered successfully!'}, status=status.HTTP_201_CREATED)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n@api_view(['POST'])\ndef login_user(request):\n    if request.method == 'POST':",
        "detail": "server.views",
        "documentation": {}
    },
    {
        "label": "login_user",
        "kind": 2,
        "importPath": "server.views",
        "description": "server.views",
        "peekOfCode": "def login_user(request):\n    if request.method == 'POST':\n        serializer = UserLoginSerializer(data=request.data)\n        if serializer.is_valid():\n            return Response({\"message\": \"Login successful!\"}, status=status.HTTP_200_OK)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n@api_view(['POST'])\ndef post(request):\n    data=[]\n    posts = Post.objects.all()",
        "detail": "server.views",
        "documentation": {}
    },
    {
        "label": "post",
        "kind": 2,
        "importPath": "server.views",
        "description": "server.views",
        "peekOfCode": "def post(request):\n    data=[]\n    posts = Post.objects.all()\n    print(f\"Current User : {posts[1].user}\")\n    #profile=UserProfile.objects.filter(user=posts.user)\n    for post in posts:\n        p={\n        'post_id':post.id,\n        'username':post.user.user.username,\n        'avtar':post.user.profile_image.url if post.user.profile_image else None,",
        "detail": "server.views",
        "documentation": {}
    },
    {
        "label": "image_to_binary",
        "kind": 2,
        "importPath": "server.views",
        "description": "server.views",
        "peekOfCode": "def image_to_binary(image_path):\n    with open(image_path, 'rb') as image_file:\n        binary_data = image_file.read()\n        return binary_data\n@csrf_exempt\ndef profile(request):\n    user = UserProfile.objects.get(id=1)\n    print(user.user)\n    # if user.profile_image.url:\n    #     img=user.profile_image.url",
        "detail": "server.views",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": "server.views",
        "description": "server.views",
        "peekOfCode": "def profile(request):\n    user = UserProfile.objects.get(id=1)\n    print(user.user)\n    # if user.profile_image.url:\n    #     img=user.profile_image.url\n    #     with open(img,'rb') as image_file:\n    #         encoded_image = base64.b64encode(image_file.read()).decode('utf-8')\n    data={'username':user.user.username,\n        'location':user.location,\n        'mobile':user.mobile,",
        "detail": "server.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'CropCare.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]